/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package circuitikztool;

import java.awt.Color;
import java.util.HashSet;
import java.util.Set;
import javax.swing.JOptionPane;

/**
 *
 * @author matth
 */
public class BlockComponentBuilder extends javax.swing.JPanel {

    int pinCount;
    String componentReference;
    String componentLabel;
    String input;

    /**
     * Creates new form BlockComponentBuilder
     */
    public BlockComponentBuilder(String latexParams) {
        parseLatexParameters(latexParams);
        initComponents();
        loadTableFromInput();

        setBackground(Preferences.backgroundColor);
        PinCount.setBackground(Preferences.themeAccent);
        PinCount.setForeground(Preferences.themeText);

        jLabel1.setBackground(Preferences.backgroundColor);
        jLabel1.setForeground(Preferences.themeText);

        jLabel2.setBackground(Preferences.backgroundColor);
        jLabel2.setForeground(Preferences.themeText);

        pinLabelTable.setBackground(Preferences.themeAccent);
        pinLabelTable.setForeground(Preferences.themeText);
        pinLabelTable.setSelectionBackground(Preferences.backgroundColor);
        pinLabelTable.setSelectionForeground(Preferences.themeText);
       
        

        componentLabelField.setBackground(Preferences.themeAccent);
        componentLabelField.setForeground(Preferences.themeText);

    }

    private void parseLatexParameters(String input) {
        this.input = input;
        int pinCountStart = input.indexOf("num pins=") + "num pins=".length();
        int pinCountEnd = input.substring(pinCountStart).indexOf(",");
        pinCount = Integer.parseInt(input.substring(pinCountStart, pinCountStart + pinCountEnd));

        int indexStartOfBlockLabel = input.indexOf("](");
        int indexEndOfBlockLabel = input.substring(indexStartOfBlockLabel).indexOf(")");
        componentReference = input.substring(indexStartOfBlockLabel + 2, indexStartOfBlockLabel + indexEndOfBlockLabel);

        int indexOfComponentLabel = indexStartOfBlockLabel + indexEndOfBlockLabel;
        int endOfComponentLabel = input.substring(indexOfComponentLabel).indexOf("}");
        componentLabel = input.substring(indexOfComponentLabel + 2, indexOfComponentLabel + endOfComponentLabel);

        System.out.println("Loading " + componentReference + " with pincount of " + pinCount + " With label \"" + componentLabel + "\"");

    }

    public String getLatexParameters() {
        String ret = "";
        ret += "node[dipchip, num pins=" + pinCount + ", hide numbers, no topmark, external pins width=0](" + componentReference + "){" + componentLabel + "};\n";
        for (int a = 0; a < pinCount / 2; a++) {
            ret += "\\node [right, font=\\tiny] at (" + componentReference + ".bpin " + (a + 1) + ") {" + pinLabelTable.getValueAt(a, 0) + "};\n";
        }
        for (int a = pinCount / 2 + 1; a <= pinCount; a++) {
            ret += "\\node [left, font=\\tiny] at (" + componentReference + ".bpin " + (a) + ") {" + pinLabelTable.getValueAt(pinCount - a, 1) + "};\n";
        }
        return ret;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pinLabelTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        PinCount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        componentLabelField = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(320, 50));

        pinLabelTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [pinCount/2][2],
            new String [] {
                "Left Pin", "Right Pin"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String

                .class
                , java.lang.String

                .class

            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(pinLabelTable);

        jLabel1.setText("Pin Count: ");

        PinCount.setText(pinCount + ""
        );
        PinCount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PinCountActionPerformed(evt);
            }
        });

        jLabel2.setText("Component Label");

        componentLabelField.setText(componentLabel
        );
        componentLabelField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                componentLabelFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(componentLabelField, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PinCount)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(componentLabelField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(PinCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void PinCountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PinCountActionPerformed
        pinCount = Integer.parseInt(PinCount.getText());

        String[][] prevValues = new String[pinCount / 2][2];
        for (int a = 0; a < pinCount / 2; a++) {
            for (int b = 0; b < 2; b++) {
                try {
                    prevValues[a][b] = (String) pinLabelTable.getValueAt(a, b);
                } catch (ArrayIndexOutOfBoundsException e) {
                    prevValues[a][b] = "";
                }
            }
        }

        if (pinCount % 2 == 1) {
            JOptionPane.showMessageDialog(this,
                    "Pin count must be even.",
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);
            pinCount++;
            PinCount.setText(pinCount + "");
        }
        pinLabelTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[pinCount / 2][2],
                new String[]{
                    "Left Pin", "Right Pin"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });

        for (int a = 0; a < pinCount / 2; a++) {
            for (int b = 0; b < 2; b++) {
                try {
                    pinLabelTable.setValueAt(prevValues[a][b], a, b);
                } catch (ArrayIndexOutOfBoundsException e) {
                    pinLabelTable.setValueAt("", a, b);
                }
            }
        }
    }//GEN-LAST:event_PinCountActionPerformed

    private void componentLabelFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_componentLabelFieldActionPerformed
        componentLabel = componentLabelField.getText();

        // TODO add your handling code here:
    }//GEN-LAST:event_componentLabelFieldActionPerformed

    private void loadTableFromInput() {

        for (int a = 1; a <= pinCount / 2; a++) {

            try {
                String tok = "(" + componentLabel + ".bpin " + a + ") {";
                String pinLabel = input.substring(input.indexOf(tok));
                pinLabel = pinLabel.substring(tok.length(), pinLabel.indexOf("};"));

                pinLabelTable.setValueAt(pinLabel, a - 1, 0);
            } catch (IndexOutOfBoundsException e) {
                pinLabelTable.setValueAt("", a - 1, 0);
                System.err.println("Failed to read from left side of table");
            }
        }

        for (int a = pinCount / 2 + 1; a <= pinCount; a++) {
            try {
                String tok = "(" + componentLabel + ".bpin " + a + ") {";
                String pinLabel = input.substring(input.indexOf(tok));
                pinLabel = pinLabel.substring(tok.length(), pinLabel.indexOf("};"));

                pinLabelTable.setValueAt(pinLabel, pinCount - a, 1);
            } catch (IndexOutOfBoundsException e) {
                pinLabelTable.setValueAt("", pinCount - a, 1);
                System.err.println("Failed to read from right side of table: " + e.getMessage());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField PinCount;
    private javax.swing.JTextField componentLabelField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable pinLabelTable;
    // End of variables declaration//GEN-END:variables
}
